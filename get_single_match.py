{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import requests\n",
    "\n",
    "import riot_api_key as riot_api_key\n",
    "import riot_consts as consts\n",
    "\n",
    "ddragon_version = requests.get('https://ddragon.leagueoflegends.com/api/versions.json').json()[0]\n",
    "ddragon_items = requests.get(\n",
    "    ('http://ddragon.leagueoflegends.com/cdn/{version}/data/en_US/item.json').format(\n",
    "        version=ddragon_version)).json()\n",
    "ddragon_champions = requests.get(\n",
    "    ('http://ddragon.leagueoflegends.com/cdn/{version}/data/en_US/championFull.json').format(\n",
    "        version=ddragon_version)).json()\n",
    "\n",
    "champions = pd.DataFrame.from_dict(ddragon_champions['data'], orient='index')\n",
    "items = pd.DataFrame.from_dict(ddragon_items['data'], orient='index')\n",
    "\n",
    "\n",
    "class riot_api(object):\n",
    "    \n",
    "    df = {}\n",
    "\n",
    "    # CORE\n",
    "    def __init__(self, api_key=riot_api_key.KEY, region='TR'):\n",
    "        self.api_key = api_key\n",
    "        self.region = region\n",
    "    \n",
    "    \n",
    "\n",
    "    def _request(self, api_url, params={}):\n",
    "        args = {'api_key': self.api_key}\n",
    "        for key, value in params.items():\n",
    "            if key not in args:\n",
    "                args[key] = value\n",
    "        response = requests.get(url=api_url, params=args)\n",
    "        print(response.url)\n",
    "        return response.json()\n",
    "\n",
    "    # SUMMONER ENDPOINT\n",
    "    def get_summoner_by_name(self, name):\n",
    "        api_url = consts.URL['summoner_by_name'].format(\n",
    "            region=consts.REGIONS[self.region],\n",
    "            version=consts.API_VERSIONS['summoner'],\n",
    "            name=name\n",
    "        )\n",
    "        return self._request(api_url)\n",
    "\n",
    "    # SPECTATOR ENDPOINT\n",
    "    def get_current_game_by_summoner_name(self, name):\n",
    "        summoner = self.get_summoner_by_name(name)\n",
    "        api_url = consts.URL['current_game_by_summoner_name'].format(\n",
    "            region=consts.REGIONS[self.region],\n",
    "            version=consts.API_VERSIONS['spectator'],\n",
    "            id=summoner['id']\n",
    "        )\n",
    "\n",
    "        return self._request(api_url)\n",
    "\n",
    "    # MATCH ENDPOINT\n",
    "    def get_matches_by_summoner_name(self, name):\n",
    "        summoner = self.get_summoner_by_name(name)\n",
    "\n",
    "        api_url = consts.URL['matches_by_summoner_name'].format(\n",
    "            proxy=consts.PROXIES[self.region],\n",
    "            version=consts.API_VERSIONS['match'],\n",
    "            puuid=summoner['puuid']\n",
    "        )\n",
    "        return self._request(api_url)\n",
    "\n",
    "    def get_game_timeline_by_match_id(self, match_id):\n",
    "        api_url = consts.URL['game_timeline_by_match_id'].format(\n",
    "            proxy=consts.PROXIES[self.region],\n",
    "            version=consts.API_VERSIONS['match'],\n",
    "            match_id=match_id\n",
    "        )\n",
    "        return self._request(api_url)\n",
    "\n",
    "    def get_match_info_by_match_id(self, match_id):\n",
    "        api_url = consts.URL['match_info_by_match_id'].format(\n",
    "            proxy=consts.PROXIES[self.region],\n",
    "            version=consts.API_VERSIONS['match'],\n",
    "            match_id=match_id\n",
    "        )\n",
    "        return self._request(api_url)\n",
    "\n",
    "    # LEAGUE ENDPOINT\n",
    "    def get_all_league_entries_by_queue_tier_division(self, queue='RANKED_SOLO_5x5', tier='PLATINUM', division='IV'):\n",
    "        api_url = consts.URL['all_league_entries_by_queue_tier_division'].format(\n",
    "            region=consts.REGIONS[self.region],\n",
    "            version=consts.API_VERSIONS['league'],\n",
    "            queue=queue,\n",
    "            tier=tier,\n",
    "            division=division)\n",
    "        return self._request(api_url)\n",
    "\n",
    "    def get_league_entries_by_summoner_id(self, summoner_id):\n",
    "        api_url = consts.URL['league_entries_by_summoner_id'].format(\n",
    "            region=consts.REGIONS[self.region],\n",
    "            version=consts.API_VERSIONS['league'],\n",
    "            encryptedSummonerId=summoner_id)\n",
    "        return self._request(api_url)\n",
    "\n",
    "    # CHAMPION MASTERY ENDPOINT\n",
    "    def get_champion_mastery_by_summoner_id_champion_id(self, summoner_id, champion_id):\n",
    "        api_url = consts.URL['champion_mastery_by_summoner_id_champion_id'].format(\n",
    "            region=consts.REGIONS[self.region],\n",
    "            version=consts.API_VERSIONS['champion-mastery'],\n",
    "            encryptedSummonerId=summoner_id,\n",
    "            championId=champion_id)\n",
    "        return self._request(api_url)\n",
    "\n",
    "    def get_champion_masteries_by_summoner_id(self, summoner_id):\n",
    "        api_url = consts.URL['champion_masteries_by_summoner_id'].format(\n",
    "            region=consts.REGIONS[self.region],\n",
    "            version=consts.API_VERSIONS['champion-mastery'],\n",
    "            encryptedSummonerId=summoner_id)\n",
    "        return self._request(api_url)\n",
    "\n",
    "    def get_total_mastery_score_by_summoner_id(self, summoner_id):\n",
    "        api_url = consts.URL['total_mastery_score_by_summoner_id'].format(\n",
    "            region=consts.REGIONS[self.region],\n",
    "            version=consts.API_VERSIONS['champion-mastery'],\n",
    "            encryptedSummonerId=summoner_id)\n",
    "        return self._request(api_url)\n",
    "\n",
    "\n",
    "    def performance_metrics(self,game):\n",
    "\n",
    "        df = game_to_df(game)\n",
    "\n",
    "        df['kda'] = (df['kills'] + df['assists']) / df['deaths']\n",
    "\n",
    "        kills = df[['championName', 'kills']].sort_values('kills', ascending=False)\n",
    "\n",
    "        assists = df[['championName', 'assists']].sort_values('assists', ascending=False)\n",
    "\n",
    "        deaths = df[['championName', 'deaths']].sort_values('deaths', ascending=False)\n",
    "\n",
    "        skills = df[['championName', 'spell1Casts', 'spell2Casts', 'spell3Casts', 'spell4Casts']]\n",
    "\n",
    "        damage_magic = df[['championName', 'magicDamageDealtToChampions']].sort_values('magicDamageDealtToChampions',\n",
    "                                                                                       ascending=False)\n",
    "\n",
    "        damage_physical = df[['championName', 'physicalDamageDealtToChampions']].sort_values(\n",
    "            'physicalDamageDealtToChampions', ascending=False)\n",
    "\n",
    "        damage_true = df[['championName', 'trueDamageDealtToChampions']].sort_values('trueDamageDealtToChampions',\n",
    "                                                                                     ascending=False)\n",
    "\n",
    "        damage_taken = df[['championName', 'totalDamageTaken']].sort_values('totalDamageTaken', ascending=False)\n",
    "\n",
    "        kda = df[['championName', 'kda']].sort_values('kda', ascending=False)\n",
    "        \n",
    "        self.kills = kills\n",
    "        self.assists = assists\n",
    "        self.deaths = deaths\n",
    "        self.skills = skills\n",
    "        self.damage_magic = damage_magic\n",
    "        self.damage_physical = damage_physical\n",
    "        self.damage_true = damage_true\n",
    "        self.damage_taken = damage_taken\n",
    "        \n",
    "        return kills, assists, deaths, skills, damage_magic, damage_physical, damage_true, damage_taken\n",
    "    \n",
    "    \n",
    "\n",
    "# TO DATAFRAME\n",
    "def game_to_df(game):\n",
    "    columns = pd.DataFrame.from_dict(game['info']['participants'][0]).set_index('participantId').columns\n",
    "    df = pd.DataFrame(columns=columns)\n",
    "    for item in game['info']['participants']:\n",
    "        temp = pd.DataFrame.from_dict(item).set_index('participantId')[:1]\n",
    "        df = pd.concat([df, temp])\n",
    "    return df\n",
    "\n",
    "\n",
    "\n",
    "riot = riot_api()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get Match"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Game types: https://static.developer.riotgames.com/docs/lol/gameTypes.json"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Game modes: https://static.developer.riotgames.com/docs/lol/gameModes.json"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Map ID: https://static.developer.riotgames.com/docs/lol/maps.json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "https://tr1.api.riotgames.com/lol/summoner/v4/summoners/by-name/rolatweete?api_key=RGAPI-323a48ad-fd5b-480b-bc74-a904619ed035\n",
      "https://europe.api.riotgames.com/lol/match/v5/matches/by-puuid/fjwykTJPXL4WGq1CCIGI0jSzInh95z-sSPktJvC426LxjwIn2ORu5Jzg4zsSC4MAkOtaSs_ahpd9gQ/ids?api_key=RGAPI-323a48ad-fd5b-480b-bc74-a904619ed035\n",
      "https://europe.api.riotgames.com/lol/match/v5/matches/TR1_1193356373?api_key=RGAPI-323a48ad-fd5b-480b-bc74-a904619ed035\n"
     ]
    }
   ],
   "source": [
    "matches = riot.get_matches_by_summoner_name('rolatweete')\n",
    "match = riot.get_match_info_by_match_id(matches[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Single Match "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "stat_list = []\n",
    "\n",
    "players = match['info']['participants']\n",
    "\n",
    "\n",
    "df = pd.DataFrame(index=players[0].keys())\n",
    "\n",
    "\n",
    "for player in range(len(players)):\n",
    "    player_stats = match['info']['participants'][player]\n",
    "    \n",
    "    # column names\n",
    "    cln = player_stats.keys()\n",
    "    \n",
    "    # numeric data\n",
    "    numeric_data = player_stats.items()\n",
    "\n",
    "    # adding numeric data to the stat_list\n",
    "    for stat in range(len(numeric_data)):\n",
    "        stat_list.append(list(numeric_data)[stat][1])\n",
    "        \n",
    "    # adding stat list to df\n",
    "    df['player_{player_number}'.format(player_number=player)] = stat_list\n",
    "    \n",
    "    # reset stat list for next player stats\n",
    "    stat_list = []\n",
    "\n",
    "df = df.T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>assists</th>\n",
       "      <th>baronKills</th>\n",
       "      <th>bountyLevel</th>\n",
       "      <th>champExperience</th>\n",
       "      <th>champLevel</th>\n",
       "      <th>championId</th>\n",
       "      <th>championName</th>\n",
       "      <th>championTransform</th>\n",
       "      <th>consumablesPurchased</th>\n",
       "      <th>damageDealtToBuildings</th>\n",
       "      <th>...</th>\n",
       "      <th>trueDamageDealtToChampions</th>\n",
       "      <th>trueDamageTaken</th>\n",
       "      <th>turretKills</th>\n",
       "      <th>turretsLost</th>\n",
       "      <th>unrealKills</th>\n",
       "      <th>visionScore</th>\n",
       "      <th>visionWardsBoughtInGame</th>\n",
       "      <th>wardsKilled</th>\n",
       "      <th>wardsPlaced</th>\n",
       "      <th>win</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>player_0</th>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>15461</td>\n",
       "      <td>16</td>\n",
       "      <td>203</td>\n",
       "      <td>Kindred</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3011</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>184</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>player_1</th>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13769</td>\n",
       "      <td>15</td>\n",
       "      <td>21</td>\n",
       "      <td>MissFortune</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>687</td>\n",
       "      <td>...</td>\n",
       "      <td>602</td>\n",
       "      <td>205</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>player_2</th>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>14715</td>\n",
       "      <td>16</td>\n",
       "      <td>76</td>\n",
       "      <td>Nidalee</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>615</td>\n",
       "      <td>...</td>\n",
       "      <td>560</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>player_3</th>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14689</td>\n",
       "      <td>15</td>\n",
       "      <td>526</td>\n",
       "      <td>Rell</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>46</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>296</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>player_4</th>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>14036</td>\n",
       "      <td>15</td>\n",
       "      <td>81</td>\n",
       "      <td>Ezreal</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3711</td>\n",
       "      <td>...</td>\n",
       "      <td>99</td>\n",
       "      <td>229</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>player_5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13018</td>\n",
       "      <td>14</td>\n",
       "      <td>238</td>\n",
       "      <td>Zed</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>419</td>\n",
       "      <td>376</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>player_6</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13765</td>\n",
       "      <td>15</td>\n",
       "      <td>429</td>\n",
       "      <td>Kalista</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>676</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>232</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>player_7</th>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14214</td>\n",
       "      <td>15</td>\n",
       "      <td>126</td>\n",
       "      <td>Jayce</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>1293</td>\n",
       "      <td>...</td>\n",
       "      <td>495</td>\n",
       "      <td>284</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>player_8</th>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13263</td>\n",
       "      <td>15</td>\n",
       "      <td>45</td>\n",
       "      <td>Veigar</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>615</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>140</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>player_9</th>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13686</td>\n",
       "      <td>15</td>\n",
       "      <td>105</td>\n",
       "      <td>Fizz</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>227</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 102 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         assists baronKills bountyLevel champExperience champLevel championId  \\\n",
       "player_0      13          0           2           15461         16        203   \n",
       "player_1      11          0           0           13769         15         21   \n",
       "player_2      14          0           1           14715         16         76   \n",
       "player_3      10          0           0           14689         15        526   \n",
       "player_4      15          0           1           14036         15         81   \n",
       "player_5       6          0           0           13018         14        238   \n",
       "player_6       9          0           0           13765         15        429   \n",
       "player_7       9          0           0           14214         15        126   \n",
       "player_8       8          0           0           13263         15         45   \n",
       "player_9      11          0           0           13686         15        105   \n",
       "\n",
       "         championName championTransform consumablesPurchased  \\\n",
       "player_0      Kindred                 0                    2   \n",
       "player_1  MissFortune                 0                    3   \n",
       "player_2      Nidalee                 0                    3   \n",
       "player_3         Rell                 0                    2   \n",
       "player_4       Ezreal                 0                    2   \n",
       "player_5          Zed                 0                    0   \n",
       "player_6      Kalista                 0                    2   \n",
       "player_7        Jayce                 0                    6   \n",
       "player_8       Veigar                 0                    7   \n",
       "player_9         Fizz                 0                    1   \n",
       "\n",
       "         damageDealtToBuildings  ... trueDamageDealtToChampions  \\\n",
       "player_0                   3011  ...                          0   \n",
       "player_1                    687  ...                        602   \n",
       "player_2                    615  ...                        560   \n",
       "player_3                     46  ...                          0   \n",
       "player_4                   3711  ...                         99   \n",
       "player_5                      0  ...                        419   \n",
       "player_6                    676  ...                          0   \n",
       "player_7                   1293  ...                        495   \n",
       "player_8                    615  ...                          0   \n",
       "player_9                      0  ...                          0   \n",
       "\n",
       "         trueDamageTaken turretKills turretsLost unrealKills visionScore  \\\n",
       "player_0             184           1           1           0           0   \n",
       "player_1             205           0           1           0           0   \n",
       "player_2               0           0           1           0           0   \n",
       "player_3             296           0           1           0           0   \n",
       "player_4             229           3           1           0           0   \n",
       "player_5             376           0           4           0           0   \n",
       "player_6             232           0           4           0           0   \n",
       "player_7             284           0           4           0           0   \n",
       "player_8             140           1           4           0           0   \n",
       "player_9             227           0           4           0           0   \n",
       "\n",
       "         visionWardsBoughtInGame wardsKilled wardsPlaced    win  \n",
       "player_0                       0           0           0   True  \n",
       "player_1                       0           0           0   True  \n",
       "player_2                       0           0           0   True  \n",
       "player_3                       0           0           0   True  \n",
       "player_4                       0           0           0   True  \n",
       "player_5                       0           0           0  False  \n",
       "player_6                       0           0           0  False  \n",
       "player_7                       0           0           0  False  \n",
       "player_8                       0           0           0  False  \n",
       "player_9                       0           0           0  False  \n",
       "\n",
       "[10 rows x 102 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Data Conversion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "numeric_columns = ['assists','baronKills','champExperience','champLevel','consumablesPurchased', \n",
    "                   'damageDealtToBuildings','damageDealtToObjectives','damageDealtToTurrets', \n",
    "                   'damageSelfMitigated','deaths','detectorWardsPlaced','doubleKills', 'dragonKills',\n",
    "                   'goldEarned','goldSpent','inhibitorKills','inhibitorsLost','item0','item1','item2',\n",
    "                   'item3','item4','item5','item6','itemsPurchased','killingSprees','kills',\n",
    "                   'largestCriticalStrike','largestKillingSpree','largestMultiKill', \n",
    "                   'longestTimeSpentLiving','magicDamageDealt','magicDamageDealtToChampions', \n",
    "                   'magicDamageTaken','neutralMinionsKilled','nexusKills','nexusLost',\n",
    "                   'objectivesStolen','objectivesStolenAssists','participantId','pentaKills',\n",
    "                   'physicalDamageDealt','physicalDamageDealtToChampions','physicalDamageTaken',\n",
    "                   'profileIcon','quadraKills','sightWardsBoughtInGame','spell1Casts','spell2Casts',\n",
    "                   'spell3Casts','spell4Casts','summoner1Casts','summoner1Id','summoner2Casts',\n",
    "                   'summoner2Id','teamId','timeCCingOthers','timePlayed','totalDamageDealt',\n",
    "                   'totalDamageDealtToChampions','totalDamageShieldedOnTeammates','totalDamageTaken',\n",
    "                   'totalHeal','totalHealsOnTeammates','totalMinionsKilled','totalTimeCCDealt',\n",
    "                   'totalTimeSpentDead','totalUnitsHealed','tripleKills','trueDamageDealt',\n",
    "                   'trueDamageDealtToChampions','trueDamageTaken','turretKills','turretsLost',\n",
    "                   'unrealKills','visionScore','visionWardsBoughtInGame','wardsKilled','wardsPlaced']\n",
    "\n",
    "\n",
    "\n",
    "df[numeric_columns] = df[numeric_columns].astype('int')\n",
    "\n",
    "\n",
    "\n",
    "''' Creating subdatasets'''\n",
    "\n",
    "df_combat = df[['championName',\n",
    "                'damageDealtToBuildings','damageDealtToObjectives','damageDealtToTurrets',\n",
    "                'magicDamageDealt','magicDamageDealtToChampions','magicDamageTaken',\n",
    "                'physicalDamageDealt','physicalDamageDealtToChampions','physicalDamageTaken',\n",
    "                'totalDamageDealt','totalDamageDealtToChampions','totalDamageTaken',\n",
    "                'trueDamageDealt','trueDamageDealtToChampions','trueDamageTaken',\n",
    "                'timeCCingOthers','totalTimeCCDealt']]\n",
    "\n",
    "\n",
    "df_obj = df[['championName',\n",
    "             'totalMinionsKilled','dragonKills','baronKills','wardsKilled',\n",
    "             'firstTowerKill','firstTowerAssist',\n",
    "             'turretKills','turretsLost',\n",
    "             'inhibitorKills','inhibitorsLost',\n",
    "             'nexusKills','nexusLost',\n",
    "             'objectivesStolen','objectivesStolenAssists']]\n",
    "\n",
    "\n",
    "df_kill = df[['championName','firstBloodAssist','bountyLevel',\n",
    "              'doubleKills','tripleKills','quadraKills','pentaKills','unrealKills',\n",
    "              'killingSprees','largestKillingSpree','largestMultiKill','largestCriticalStrike']]\n",
    "\n",
    "\n",
    "\n",
    "df_summoner = df[['championName',\n",
    "                  'summonerId','summonerName','summonerLevel',\n",
    "                  'summoner1Casts','summoner1Id',\n",
    "                  'summoner2Casts','summoner2Id',\n",
    "                  'individualPosition','lane','role',\n",
    "                  'championTransform']]\n",
    "\n",
    "\n",
    "df_items = df[['championName',\n",
    "               'item0','item1',\n",
    "               'item2','item3',\n",
    "               'item4','item5','item6']]\n",
    "\n",
    "\n",
    "df_vision = df[['championName',\n",
    "                'sightWardsBoughtInGame','visionWardsBoughtInGame',      \n",
    "                'detectorWardsPlaced','wardsPlaced',\n",
    "                'wardsKilled',\n",
    "                'visionScore']]\n",
    "    \n",
    "    \n",
    "df_player = df[['championName',\n",
    "                'participantId','riotIdName',\n",
    "                'riotIdTagline','puuid',\n",
    "                'profileIcon']]               \n",
    "\n",
    "df_champ = df[['championName','championId',\n",
    "               'champExperience','champLevel']]\n",
    "\n",
    "df_sup = df[['championName','damageSelfMitigated','totalDamageShieldedOnTeammates',\n",
    "             'totalHeal','totalHealsOnTeammates','totalUnitsHealed']]\n",
    "\n",
    "\n",
    "df_spell = df[['championName','spell1Casts','spell2Casts',\n",
    "               'spell3Casts','spell4Casts']]\n",
    "\n",
    "df_surr = df[['championName','teamEarlySurrendered',\n",
    "              'gameEndedInEarlySurrender',\n",
    "              'gameEndedInSurrender']]\n",
    "\n",
    "df_survive = df[['championName','totalTimeSpentDead',\n",
    "                 'longestTimeSpentLiving',\n",
    "                 'timePlayed']]\n",
    "\n",
    "\n",
    "df_kda = df[['championName','kills','deaths','assists']]\n",
    "\n",
    "df_team = df[['teamId','win']]\n",
    "\n",
    "df_purchase = df[['championName',\n",
    "                  'consumablesPurchased',\n",
    "                  'itemsPurchased']]\n",
    "\n",
    "\n",
    "df_income = df[['championName','goldEarned','goldSpent']]\n",
    "\n",
    "df_perks = df[['championName','perks']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='championName'>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA3kAAAGlCAYAAABHkz+oAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/Il7ecAAAACXBIWXMAAAsTAAALEwEAmpwYAABCrUlEQVR4nO3debyVZb3//9cHHNAURSUlQCFDmQfd4JgpmlqZU+HwtUIt6Dh0PDaaWZKSx8zqF6YZJz1q6SmVNPPYMVE0h1DBCUUMTAxIFEVRRBHk8/tj3Xu3RYa9YcPa6+b1fDzWY6/7Wvd978+6GfZ+r+u6rysyE0mSJElSObSpdgGSJEmSpJZjyJMkSZKkEjHkSZIkSVKJGPIkSZIkqUQMeZIkSZJUIhtVu4A1td1222W3bt2qXYYkSZIkVcXkyZNfzsyOy7fXbMjr1q0bkyZNqnYZkiRJklQVEfH8itodrilJkiRJJWLIkyRJkqQSMeRJkiRJUonU7D15kiRJUi1YsmQJs2fP5u233652KapR7dq1o0uXLmy88cZN2t+QJ0mSJK1Ds2fPZsstt6Rbt25ERLXLUY3JTF555RVmz55N9+7dm3SMwzUlSZKkdejtt99m2223NeBpjUQE2267bbN6gg15kiRJ0jpmwNPaaO7fH0OeJEmSJJWIIU+SJElajzp12ZGIaLFHpy47VuV9fPKTn+S1115b6eujRo2ic+fODBw4kB49enD00UczderU9VdgE1111VV07NiRQYMG0aNHDw455BAeeOCBtTrf6aefDsDNN99clffsxCuSJEnSejR3zix2+tatLXa+5394WIudqzluu+221e5z5pln8vWvfx2A3/3udwwdOpQpU6bQsWPHdV1esxx77LH8/Oc/B2DChAkcffTRTJgwgV69eq3VeW+++WYOO+wwevfu3RJlNpk9eZIkSVKJzZw5k549e3LiiSeyyy67cMIJJzB+/Hj22WcfevTowUMPPcRDDz3EXnvtxaBBg9h777155plnAFi0aBHHHHMMvXv35qijjmKPPfZg0qRJAHTr1o2XX34ZgGuuuYb+/fszYMAAPv/5z6+wjmOPPZaDDz6Y6667DoDzzjuPwYMH07dvX0aOHElmArD//vtz5plnUldXR69evXj44Yc5+uij6dGjB+ecc07D+Y488kh23313+vTpw9ixYxvar7jiCnbZZReGDBnCiBEjGnrV5s2bx2c+8xkGDx7M4MGDuf/++1dY5wEHHMDIkSMbzvnss89y6KGHsvvuu/PRj36UadOmAfDHP/6RPfbYg0GDBnHQQQfx4osvvuc8DzzwALfccgvf+MY3GDhwIM8++2wz/tTWjj15kiRJUsnNmDGDG264gSuvvJLBgwdz3XXXcd9993HLLbdwwQUXcM0113Dvvfey0UYbMX78eM4++2zGjRvHZZddRocOHZg6dSpPPvkkAwcOfN+5n3rqKUaPHs0DDzzAdtttx/z581dax2677dYQkk4//XS+973vAfD5z3+eW2+9lU9/+tMAbLLJJkyaNImf/exnHHHEEUyePJltttmGnXfemTPPPJNtt92WK6+8km222Ya33nqLwYMH85nPfIbFixdz/vnn88gjj7DlllsydOhQBgwYAMAZZ5zBmWeeyb777ss//vEPDjnkEJ5++umV1vnLX/4SgJEjR3L55ZfTo0cPHnzwQU499VTuuusu9t13XyZOnEhE8Ktf/YqLLrqIH//4xw3n2HvvvTn88MM57LDD+OxnP9v8P7S1YMiTJEmSSq579+7069cPgD59+nDggQcSEfTr14+ZM2eyYMEChg8fzvTp04kIlixZAsB9993HGWecAUDfvn3p37//+8591113MWzYMLbbbjsAttlmm5XWUd9bB5VhkRdddBGLFi1i/vz59OnTpyHkHX744QD069ePPn360KlTJwA+/OEPM2vWLLbddlvGjBnDTTfdBMCsWbOYPn06c+fO5WMf+1hDDcOGDeNvf/sbAOPHj3/P/XGvv/46CxcuXGWdCxcu5IEHHmDYsGENry1evBiorH947LHH8sILL/DOO+80eQ279cGQJ0mSJJXcpptu2vC8TZs2Ddtt2rRh6dKlfPe73+WAAw7gpptuYubMmey///7rpI5HH32Uuro63n77bU499VQmTZpE165dGTVq1HvWgWtc3/K1L126lLvvvpvx48fz17/+lc0335z9999/tevILVu2jIkTJ9KuXbsm1dmrVy+WLVvG1ltvzWOPPfa+fb7yla/w1a9+lcMPP5y7776bUaNGNe0irAfekydJWu+6dem0RjPIdevSqdqlS1IpLViwgM6dOwOV2SHr7bPPPlx//fUATJ06lSlTprzv2KFDh3LDDTfwyiuvAKx0uOa4ceP485//zPHHH98QyLbbbjsWLlzIjTfe2Ox6O3TowOabb860adOYOHEiAIMHD+aee+7h1VdfZenSpYwbN67hmIMPPphLLrmkYXtFwQ3gnnvuYezYsYwYMYL27dvTvXt3brjhBqDSw/f444831FB/za6++uoVnmvLLbfkjTfeaNZ7awn25EmS1rvn58wlz23f7OPi+3PXQTWStH7t0Llri86IuUPnrmt9jm9+85sMHz6c0aNH86lPfaqh/dRTT2X48OH07t2bnj170qdPH7baaqv3HNunTx++853v8LGPfYy2bdsyaNCghqD405/+lN/85je8+eab9O3bl7vuuqthZs0RI0bQt29fdthhBwYPHtyseg899FAuv/xyevXqxa677sqee+4JQOfOnTn77LMZMmQI22yzDT179myod8yYMZx22mn079+fpUuXst9++3H55ZcDlZk/77vvPhYtWkT37t0ZN25cw8ya1157LaeccgqjR49myZIlHHfccQwYMIBRo0YxbNgwOnTowNChQ3nuuefeV+dxxx3HiBEjGDNmDDfeeCM777xzs97nmorG42JrSV1dXdbP7CNJqi0RsYYh73Vq9eeWpA3X008/vdZT8VfLu+++y5IlS2jXrh3PPvssBx10EM888wybbLJJtUtbqYULF7LFFluwdOlSjjrqKE4++WSOOuqoape11lb09ygiJmdm3fL72pMnSZIkaYUWLVrEAQccwJIlS8hMLrvsslYd8KCyCPv48eN5++23OfjggznyyCOrXdJ6Z8iTJEmStEJbbrkltTZ67uKLL652CVXnxCuSJEmSVCKGPEmSJEkqEUOeJEmSJJWIIU+SJEmSSqRJIS8ito6IGyNiWkQ8HRF7RcQ2EXFHREwvvnYo9o2IGBMRMyLiiYjYrdF5hhf7T4+I4Y3ad4+IKcUxYyIiWv6tSpIkSdXXrUsnIqLFHt26dFqzOrp14+WXX16r9zJp0iT+/d//fY2O3X///RsmdenWrRv9+vWjX79+9O7dm3POOadhwfTWZP/992fXXXelf//+9OzZk9NPP53XXnttrc5Xfw0uuOCCFqqy6bNr/gz4v8z8bERsAmwOnA3cmZkXRsRZwFnAt4BPAD2Kxx7AL4A9ImIb4FygDkhgckTckpmvFvuMAB4EbgMOBf7UQu9RkiRJajWenzN3jdYKXZn4/twWO1dz1dXVUVf3vmXa1siECRPYbrvtWLhwISNHjuTLX/4yV199dYucuyVde+211NXV8c477/Dtb3+bI444gnvuuWetz3vBBRdw9tlnt0CFTejJi4itgP2AKwAy853MfA04Aqi/6lcDRxbPjwCuyYqJwNYR0Qk4BLgjM+cXwe4O4NDitfaZOTErK9xe0+hckiRJktbCzJkz6dmzJyeccAK9evXis5/9LIsWLQLgkksuYbfddqNfv35MmzaNZcuW0aNHD+bNmwfAsmXL+MhHPsK8efO44YYb6Nu3LwMGDGC//fYD4O677+awww4DKouQn3TSSfTr14/+/fszbtw4AE455RTq6uro06cP55577mrr3WKLLbj88su5+eabmT9/PgsXLuTAAw9sqPMPf/jDe97XiSeeyC677MIJJ5zA+PHj2WeffejRowcPPfQQAA899BB77bUXgwYNYu+99+aZZ54BKmsAHnPMMfTu3ZujjjqKPfbYo6FX7c9//jN77bUXu+22G8OGDWPhwoXvq3OTTTbhoosu4h//+AePP/44AL/5zW8YMmQIAwcO5Mtf/jLvvvtuk67BWWedxVtvvcXAgQM54YQTmvLHukpNGa7ZHZgH/HdEPBoRv4qIDwDbZ+YLxT5zge2L552BWY2On120rap99gra3yciRkbEpIiYVP8XT5IkSdKqPfPMM5x66qk8/fTTtG/fnssuuwyA7bbbjkceeYRTTjmFiy++mDZt2vC5z32Oa6+9FoDx48czYMAAOnbsyHnnncftt9/O448/zi233PK+73H++eez1VZbMWXKFJ544gmGDh0KwA9+8AMmTZrEE088wT333MMTTzyx2nrbt29P9+7dmT59Ou3ateOmm27ikUceYcKECXzta1+j0jcEM2bM4Gtf+xrTpk1j2rRpXHfdddx3331cfPHFDcMfe/bsyb333sujjz7Keeed19Bbdtlll9GhQwemTp3K+eefz+TJkwF4+eWXGT16NOPHj+eRRx6hrq6On/zkJyuss23btgwYMIBp06bx9NNP87vf/Y7777+fxx57jLZt2zZcx9VdgwsvvJDNNtuMxx57rOGYtdGU4ZobAbsBX8nMByPiZ1SGZjbIzIyIXOtqViMzxwJjAerq6tb595MkSZLKoGvXruyzzz4AfO5zn2PMmDEAHH300QDsvvvu/P73vwfg5JNP5ogjjuA//uM/uPLKKznppJMA2GeffTjxxBM55phjGo5rbPz48fz2t79t2O7QoQMA119/PWPHjmXp0qW88MILTJ06lf79+6+25vogl5mcffbZ/OUvf6FNmzbMmTOHF198EYDu3bvTr18/APr06cOBBx5IRNCvXz9mzpwJwIIFCxg+fDjTp08nIliyZAkA9913H2eccQYAffv2bahp4sSJTJ06teF6vfPOO+y1116rrfPOO+9k8uTJDB48GIC33nqLD37wg2t1DdZUU0LebGB2Zj5YbN9IJeS9GBGdMvOFYsjlS8Xrc4CujY7vUrTNAfZfrv3uor3LCvaXJEmS1AKWn9ewfnvTTTcFKj1SS5cuBSqBcPvtt+euu+7ioYceauhZuvzyy3nwwQf53//9X3bfffeGnq9Vee6557j44ot5+OGH6dChAyeeeGKTJlR54403mDlzJrvssgvXXnst8+bNY/LkyWy88cZ069at4Rz19QO0adOmYbtNmzYN7+e73/0uBxxwADfddBMzZ85k//33X+X3zkw+/vGP8z//8z+rrfPdd99lypQp9OrVi5deeonhw4fzn//5ny1yDdbGaodrZuZcYFZE7Fo0HQhMBW4B6mfIHA78oXh+C/CFYpbNPYEFxbDO24GDI6JDMRPnwcDtxWuvR8SexayaX2h0LkmSJElr6R//+Ad//etfAbjuuuvYd999V7n/l770JT73uc8xbNgw2rZtC8Czzz7LHnvswXnnnUfHjh2ZNWvWe475+Mc/zqWXXtqw/eqrr/L666/zgQ98gK222ooXX3yRP/1p9XMrLly4kFNPPZUjjzySDh06sGDBAj74wQ+y8cYbM2HCBJ5//vlmvfcFCxbQuXPlbrCrrrqqoX2fffbh+uuvB2Dq1KlMmTIFgD333JP777+fGTNmAPDmm2/yt7/97X3nXbJkCd/+9rfp2rUr/fv358ADD+TGG2/kpZcqfV/z58/n+eefb/I12HjjjRt6GddWU2fX/ApwbTGz5t+Bk6gExOsj4ovA88Axxb63AZ8EZgCLin3JzPkRcT7wcLHfeZk5v3h+KnAVsBmVWTWdWVOSJEmltFPnHVp0RsydOu+w2n123XVXLr30Uk4++WR69+7NKaecwiWXXLLS/Q8//HBOOumkhqGaAN/4xjeYPn06mcmBBx7IgAED3jOr5DnnnMNpp51G3759adu2Leeeey5HH300gwYNomfPnu8ZMroiBxxwAJnJsmXLOOqoo/jud78LwAknnMCnP/1p+vXrR11dHT179mzKZWnwzW9+k+HDhzN69Gg+9alPNbSfeuqpDB8+nN69e9OzZ0/69OnDVlttRceOHbnqqqs4/vjjWbx4MQCjR49ml112aahn0003ZfHixRx00EENE8H07t2b0aNHc/DBB7Ns2TI23nhjLr30Uvbcc88mXYORI0fSv39/dtttt7W+Ly/qx5DWmrq6uqyf/UaSVFsiYo2mD4/vv06t/tyStOF6+umn6dWrV9W+/8yZMznssMN48sknm3zMpEmTOPPMM7n33nvXYWXV9e6777JkyRLatWvHs88+y0EHHcQzzzzDJptsUu3SVmhFf48iYnJmvm8Ni6b25EmSJEnaAFx44YX84he/aJFZHluzRYsWccABB7BkyRIyk8suu6zVBrzmMuRJkiRJJdatW7dm9eKdddZZnHXWWavfscZtueWWlHVkYFPWyZMkSZIk1QhDniRJkiSViCFPkiRJkkrEkCdJkiRJJWLIkyRJktajD3X9EBHRYo8Pdf3QKr/fa6+9xmWXXdZi9Y8aNYrOnTszcOBAevTowdFHH83UqVNb7Pwt5aqrrqJjx44MGjSIHj16cMghh/DAAw+s1flOP/10AG6++eZW+Z7rObumJEmStB69MPsF+l7Vt8XO9+SJq545sz7knXrqqe9pX7p0KRtttGZx4Mwzz+TrX/86AL/73e8YOnQoU6ZMoWPHjmt0vnXl2GOP5ec//zkAEyZM4Oijj2bChAlrvW7hzTffzGGHHUbv3r1boswWZ0+eJEmSVGJnnXUWzz77LAMHDmTw4MF89KMf5fDDD6d3797MnDmTvn3/FTgvvvhiRo0aBcCzzz7LoYceyu67785HP/pRpk2btsLzH3vssRx88MFcd911AJx33nkMHjyYvn37MnLkSDITgP33358zzzyTuro6evXqxcMPP8zRRx9Njx49OOeccxrOd+SRR7L77rvTp08fxo4d29B+xRVXsMsuuzBkyBBGjBjR0Ks2b948PvOZzzB48GAGDx7M/fffv8I6DzjgAEaOHNlwzpW9vz/+8Y/sscceDBo0iIMOOogXX3zxPed54IEHuOWWW/jGN77BwIEDefbZZ5v8Z7G+GPIkSZKkErvwwgvZeeedeeyxx/jRj37EI488ws9+9jP+9re/rfK4kSNHcskllzB58mQuvvji9/UENrbbbrs1hKTTTz+dhx9+mCeffJK33nqLW2+9tWG/TTbZhEmTJvFv//ZvHHHEEVx66aU8+eSTXHXVVbzyyisAXHnllUyePJlJkyYxZswYXnnlFf75z39y/vnnM3HiRO6///73BM4zzjiDM888k4cffphx48bxpS99qUl1ruz97bvvvkycOJFHH32U4447josuuug959h77705/PDD+dGPfsRjjz3GzjvvvMrrWA0O15QkSZI2IEOGDKF79+6r3GfhwoU88MADDBs2rKFt8eLFK92/vrcOKsMiL7roIhYtWsT8+fPp06cPn/70pwE4/PDDAejXrx99+vShU6dOAHz4wx9m1qxZbLvttowZM4abbroJgFmzZjF9+nTmzp3Lxz72MbbZZhsAhg0b1hBSx48f/577415//XUWLly4yjpX9f5mz57NscceywsvvMA777yz2mvVGhnyJEmSpA3IBz7wgYbnG220EcuWLWvYfvvttwFYtmwZW2+9NY899liTzvnoo49SV1fH22+/zamnnsqkSZPo2rUro0aNajgnwKabbgpAmzZtGp7Xby9dupS7776b8ePH89e//pXNN9+c/fff/z3Hr8iyZcuYOHEi7dq1a1KdvXr1WuX7+8pXvsJXv/pVDj/8cO6+++6G4au1xOGakiRJUoltueWWvPHGGyt8bfvtt+ell17ilVdeYfHixQ1DK9u3b0/37t254YYbgEoP2OOPP77Cc4wbN44///nPHH/88Q2BbLvttmPhwoXceOONzap1wYIFdOjQgc0335xp06YxceJEAAYPHsw999zDq6++ytKlSxk3blzDMQcffDCXXHJJw/bKguk999zD2LFjGTFixCrf34IFC+jcuTMAV1999QrPtapr2hrYkydJkiStR526dFrtjJjNPd+qbLvttuyzzz707duXzTbbjO23377htY033pjvfe97DBkyhM6dO9OzZ8+G16699lpOOeUURo8ezZIlSzjuuOMYMGAAAD/96U/5zW9+w5tvvknfvn256667GmbWHDFiBH379mWHHXZg8ODBzXovhx56KJdffjm9evVi1113Zc899wSgc+fOnH322QwZMoRtttmGnj17stVWWwEwZswYTjvtNPr378/SpUvZb7/9uPzyy4HKzJ/33XcfixYtonv37owb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\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "plt.rcParams['figure.figsize']=(15,6)\n",
    "pd.pivot_table(df,values=['magicDamageDealt','physicalDamageDealt','trueDamageDealt'], index='championName').plot(kind='bar',\n",
    "                                                                                       edgecolor='k',linewidth='1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='championName'>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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zBjOO+88pk6dysiRIxk2bBhHHnkkL7744pued+uttzJkyBCGDx/ODTfcsKL92WefpV+/fiu2hw0bBtSC2f7778+hhx7K4MGDOfnkk1m+fDkAv/vd79h7770ZPnw4Rx99NAsWLABgwIABjB8/nuHDhzN06FBmzpzJ7Nmz+clPfsIFF1zAbrvtxt13391p18aQJ0mSJKmhPPjgg1x//fU88sgj/OY3v2Hy5MkAHH/88Zx77rlMmzaNoUOHcuaZZ670vEWLFnHSSSdx8803M2XKFObNe6PH8NRTT+XEE0/kgAMO4JxzzuFvf/vbin0PPPAAF154ITNmzOCJJ57ghhtu4B//+Adnn302v//973nooYcYMWIE559//ornvO1tb+Ohhx7ilFNO4bzzzmPAgAGcfPLJfP7zn2fq1Knst99+nXZ9DHmSJEmSGsq9997L6NGjaWpqYrPNNuOwww7jtdde46WXXuJ973sfAGPHjuWuu+5a6XkzZ85k4MCBDBo0iIjguOOOW7Hv4IMP5sknn+Skk05i5syZ7L777syfPx+Avfbaix122IEePXowZswY7rnnHu677z5mzJjBPvvsw2677cbEiRN5+umnV5zvox/9KAB77LEHs2fP7uQrsjLvyZMkSZIkYKuttuLYY4/l2GOPZdSoUdx1111svfXWRMRKx0UEmckHP/hBrrzyylbPtdFGGwHQo0cPli5d2um1t2RPniRJkqSGss8++3DzzTezaNEiFixYwC233MImm2xCr169Vtzrdvnll6/o1Ws2ZMgQZs+ezRNPPAGwUkC74447WLhwIQCvvvoqTzzxBNtvvz1QG6751FNPsXz5cq6++mr23XdfRo4cyb333susWbMAeO211/jLX/6yxro322wzXn311fpchDWwJ0+SJElSh/Tvu21dZ8Ts33fbNe7fc889Ofzwwxk2bBjbbLMNQ4cOZYsttmDixImcfPLJLFy4kB122IFLLrlkpec1NTUxYcIEDj30UDbeeGP222+/FaFrypQpnHbaafTs2ZPly5fzmc98hj333JNJkyax5557ctpppzFr1iwOOOAAjjzySDbYYAMuvfRSxowZw+LFiwE4++yzefe7373aug877DCOOuoobrzxRi688MJOuy8vMrNTTtzZRowYkc03WNZLn37bM2/uM3U957Z9t+PZOX+t6zklqbuICPqf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\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.rcParams['figure.figsize']=(15,6)\n",
    "pd.pivot_table(df,values=['goldEarned','goldSpent'], index='championName').plot(kind='bar',\n",
    "                                                                                       edgecolor='k',linewidth='1')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
